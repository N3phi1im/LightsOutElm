var _rtfeldman$html_test_runner$Test_Runner_Html$formatDuration = function (time) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(time),
		' ms');
};
var _rtfeldman$html_test_runner$Test_Runner_Html$warn = F2(
	function (str, result) {
		var _p0 = _elm_lang$core$Debug$log(str);
		return result;
	});
var _rtfeldman$html_test_runner$Test_Runner_Html$never = function (a) {
	never:
	while (true) {
		var _v0 = a;
		a = _v0;
		continue never;
	}
};
var _rtfeldman$html_test_runner$Test_Runner_Html$resultsStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'font-size', _1: '14px'},
			{ctor: '_Tuple2', _0: 'line-height', _1: '1.3'},
			{ctor: '_Tuple2', _0: 'font-family', _1: 'Menlo, Consolas, \"Fira Mono\", \"DejaVu Sans Mono\", \"Liberation Monospace\", \"Liberation Mono\", Monaco, \"Lucida Console\", \"Courier New\", monospace'}
		]));
var _rtfeldman$html_test_runner$Test_Runner_Html$withColorChar = F3(
	function ($char, textColor, str) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'color', _1: textColor}
						]))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(
					A2(
						_elm_lang$core$String$cons,
						$char,
						A2(
							_elm_lang$core$String$cons,
							_elm_lang$core$Native_Utils.chr(' '),
							str)))
				]));
	});
var _rtfeldman$html_test_runner$Test_Runner_Html$withoutEmptyStrings = _elm_lang$core$List$filter(
	F2(
		function (x, y) {
			return !_elm_lang$core$Native_Utils.eq(x, y);
		})(''));
var _rtfeldman$html_test_runner$Test_Runner_Html$messageAttributes = _elm_lang$core$Native_List.fromArray(
	[
		_elm_lang$html$Html_Attributes$width(80),
		_elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'margin-left', _1: '32px'},
				{ctor: '_Tuple2', _0: 'margin-bottom', _1: '40px'},
				{ctor: '_Tuple2', _0: 'font-size', _1: 'inherit'},
				{ctor: '_Tuple2', _0: 'font-family', _1: 'inherit'}
			]))
	]);
var _rtfeldman$html_test_runner$Test_Runner_Html$givenAttributes = _elm_lang$core$Native_List.fromArray(
	[
		_elm_lang$html$Html_Attributes$width(80),
		_elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'margin-bottom', _1: '24px'},
				{ctor: '_Tuple2', _0: 'color', _1: 'darkgray'},
				{ctor: '_Tuple2', _0: 'font-size', _1: 'inherit'},
				{ctor: '_Tuple2', _0: 'font-family', _1: 'inherit'}
			]))
	]);
var _rtfeldman$html_test_runner$Test_Runner_Html$viewFailure = function (expectation) {
	var _p1 = _elm_community$elm_test$Expect$getFailure(expectation);
	if (_p1.ctor === 'Just') {
		var _p2 = _p1._0.given;
		var givenElem = _elm_lang$core$String$isEmpty(_p2) ? _elm_lang$html$Html$text('') : A2(
			_elm_lang$html$Html$pre,
			_rtfeldman$html_test_runner$Test_Runner_Html$givenAttributes,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(
					A2(_elm_lang$core$Basics_ops['++'], 'Given ', _p2))
				]));
		return _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						givenElem,
						A2(
						_elm_lang$html$Html$pre,
						_rtfeldman$html_test_runner$Test_Runner_Html$messageAttributes,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(_p1._0.message)
							]))
					])));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _rtfeldman$html_test_runner$Test_Runner_Html$viewLabels = A2(
	_elm_community$elm_test$Test_Runner$formatLabels,
	A2(
		_rtfeldman$html_test_runner$Test_Runner_Html$withColorChar,
		_elm_lang$core$Native_Utils.chr('↓'),
		'darkgray'),
	A2(
		_rtfeldman$html_test_runner$Test_Runner_Html$withColorChar,
		_elm_lang$core$Native_Utils.chr('✗'),
		'hsla(3, 100%, 40%, 1.0)'));
var _rtfeldman$html_test_runner$Test_Runner_Html$viewFailures = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'margin', _1: '40px 0'}
					]))
			]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_rtfeldman$html_test_runner$Test_Runner_Html$viewLabels(_p4._0),
			A2(_elm_lang$core$List$filterMap, _rtfeldman$html_test_runner$Test_Runner_Html$viewFailure, _p4._1)));
};
var _rtfeldman$html_test_runner$Test_Runner_Html$view = function (model) {
	var failures = A2(
		_elm_lang$core$List$filter,
		function (_p5) {
			return A2(
				_elm_lang$core$List$any,
				F2(
					function (x, y) {
						return !_elm_lang$core$Native_Utils.eq(x, y);
					})(_elm_community$elm_test$Expect$pass),
				_elm_lang$core$Basics$snd(_p5));
		},
		model.completed);
	var remainingCount = _elm_lang$core$List$length(
		_elm_lang$core$Dict$keys(model.available));
	var completedCount = _elm_lang$core$List$length(model.completed);
	var summary = function () {
		var _p6 = model.finishTime;
		if (_p6.ctor === 'Just') {
			var duration = _rtfeldman$html_test_runner$Test_Runner_Html$formatDuration(_p6._0 - model.startTime);
			var thStyle = _elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'text-align', _1: 'left'},
					{ctor: '_Tuple2', _0: 'padding-right', _1: '10px'}
				]);
			var _p7 = _elm_lang$core$List$isEmpty(failures) ? {ctor: '_Tuple2', _0: 'darkgreen', _1: 'Test Run Passed'} : {ctor: '_Tuple2', _0: 'hsla(3, 100%, 40%, 1.0)', _1: 'Test Run Failed'};
			var headlineColor = _p7._0;
			var headlineText = _p7._1;
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$h2,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'color', _1: headlineColor}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(headlineText)
							])),
						A2(
						_elm_lang$html$Html$table,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$tbody,
								_elm_lang$core$Native_List.fromArray(
									[]),
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html$tr,
										_elm_lang$core$Native_List.fromArray(
											[]),
										_elm_lang$core$Native_List.fromArray(
											[
												A2(
												_elm_lang$html$Html$th,
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html_Attributes$style(thStyle)
													]),
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html$text('Duration')
													])),
												A2(
												_elm_lang$html$Html$td,
												_elm_lang$core$Native_List.fromArray(
													[]),
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html$text(duration)
													]))
											])),
										A2(
										_elm_lang$html$Html$tr,
										_elm_lang$core$Native_List.fromArray(
											[]),
										_elm_lang$core$Native_List.fromArray(
											[
												A2(
												_elm_lang$html$Html$th,
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html_Attributes$style(thStyle)
													]),
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html$text('Passed')
													])),
												A2(
												_elm_lang$html$Html$td,
												_elm_lang$core$Native_List.fromArray(
													[]),
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString(
															completedCount - _elm_lang$core$List$length(failures)))
													]))
											])),
										A2(
										_elm_lang$html$Html$tr,
										_elm_lang$core$Native_List.fromArray(
											[]),
										_elm_lang$core$Native_List.fromArray(
											[
												A2(
												_elm_lang$html$Html$th,
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html_Attributes$style(thStyle)
													]),
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html$text('Failed')
													])),
												A2(
												_elm_lang$html$Html$td,
												_elm_lang$core$Native_List.fromArray(
													[]),
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString(
															_elm_lang$core$List$length(failures)))
													]))
											]))
									]))
							]))
					]));
		} else {
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$h2,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Running Tests...')
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(completedCount),
									' completed'))
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(remainingCount),
									' remaining'))
							]))
					]));
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'width', _1: '960px'},
						{ctor: '_Tuple2', _0: 'margin', _1: 'auto 40px'},
						{ctor: '_Tuple2', _0: 'font-family', _1: 'verdana, sans-serif'}
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				summary,
				A2(
				_elm_lang$html$Html$ol,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('results'),
						_rtfeldman$html_test_runner$Test_Runner_Html$resultsStyle
					]),
				A2(_elm_lang$core$List$map, _rtfeldman$html_test_runner$Test_Runner_Html$viewFailures, failures))
			]));
};
var _rtfeldman$html_test_runner$Test_Runner_Html$Model = F6(
	function (a, b, c, d, e, f) {
		return {available: a, running: b, queue: c, completed: d, startTime: e, finishTime: f};
	});
var _rtfeldman$html_test_runner$Test_Runner_Html$Finish = function (a) {
	return {ctor: 'Finish', _0: a};
};
var _rtfeldman$html_test_runner$Test_Runner_Html$Dispatch = {ctor: 'Dispatch'};
var _rtfeldman$html_test_runner$Test_Runner_Html$dispatch = A3(
	_elm_lang$core$Task$perform,
	_elm_lang$core$Basics$identity,
	_elm_lang$core$Basics$identity,
	_elm_lang$core$Task$succeed(_rtfeldman$html_test_runner$Test_Runner_Html$Dispatch));
var _rtfeldman$html_test_runner$Test_Runner_Html$update = F2(
	function (msg, model) {
		var _p8 = msg;
		if (_p8.ctor === 'Finish') {
			var _p9 = model.finishTime;
			if (_p9.ctor === 'Nothing') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							finishTime: _elm_lang$core$Maybe$Just(_p8._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				return A2(
					_rtfeldman$html_test_runner$Test_Runner_Html$warn,
					'Attempted to Finish more than once!',
					{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
			}
		} else {
			var _p10 = model.queue;
			if (_p10.ctor === '[]') {
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(_elm_lang$core$Task$perform, _rtfeldman$html_test_runner$Test_Runner_Html$never, _rtfeldman$html_test_runner$Test_Runner_Html$Finish, _elm_lang$core$Time$now)
				};
			} else {
				var _p12 = _p10._0;
				var _p11 = A2(_elm_lang$core$Dict$get, _p12, model.available);
				if (_p11.ctor === 'Nothing') {
					return A2(
						_rtfeldman$html_test_runner$Test_Runner_Html$warn,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Could not find testId ',
							_elm_lang$core$Basics$toString(_p12)),
						{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
				} else {
					var available = A2(_elm_lang$core$Dict$remove, _p12, model.available);
					var completed = A2(
						_elm_lang$core$Basics_ops['++'],
						model.completed,
						_elm_lang$core$Native_List.fromArray(
							[
								_p11._0(
								{ctor: '_Tuple0'})
							]));
					var newModel = _elm_lang$core$Native_Utils.update(
						model,
						{completed: completed, available: available, queue: _p10._1});
					return {ctor: '_Tuple2', _0: newModel, _1: _rtfeldman$html_test_runner$Test_Runner_Html$dispatch};
				}
			}
		}
	});
var _rtfeldman$html_test_runner$Test_Runner_Html$init = F2(
	function (startTime, thunks) {
		var indexedThunks = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			thunks);
		var model = {
			available: _elm_lang$core$Dict$fromList(indexedThunks),
			running: _elm_lang$core$Set$empty,
			queue: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$fst, indexedThunks),
			completed: _elm_lang$core$Native_List.fromArray(
				[]),
			startTime: startTime,
			finishTime: _elm_lang$core$Maybe$Nothing
		};
		return {ctor: '_Tuple2', _0: model, _1: _rtfeldman$html_test_runner$Test_Runner_Html$dispatch};
	});
var _rtfeldman$html_test_runner$Test_Runner_Html$runWithOptions = F2(
	function (runs, seed) {
		return A2(
			_rtfeldman$html_test_runner$Test_Runner_Html_App$run,
			{runs: runs, seed: seed},
			{
				init: _rtfeldman$html_test_runner$Test_Runner_Html$init,
				update: _rtfeldman$html_test_runner$Test_Runner_Html$update,
				view: _rtfeldman$html_test_runner$Test_Runner_Html$view,
				subscriptions: function (_p13) {
					return _elm_lang$core$Platform_Sub$none;
				}
			});
	});
var _rtfeldman$html_test_runner$Test_Runner_Html$run = A2(_rtfeldman$html_test_runner$Test_Runner_Html$runWithOptions, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
